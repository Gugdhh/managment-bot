import html
import re
from typing import Optional

from shizuka import LOGGER, TIGERS, dispatcher
from shizuka.modules.helper_funcs.chat_status import (bot_admin,
                                                          user_admin_no_reply,
                                                           can_restrict,
                                                           connection_status,
                                                           is_user_admin,
                                                           user_admin)
from shizuka.modules.helper_funcs.extraction import (extract_user,
                                                          extract_user_and_text)
from shizuka.modules.helper_funcs.string_handling import extract_time
from shizuka.modules.log_channel import loggable

from telegram import (
    Bot, 
    Chat, 
    ChatPermissions, 
    ParseMode, 
    Update, 
    User, 
    CallbackQuery,
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.error import BadRequest
from telegram.ext import CallbackContext, CommandHandler, run_async, CallbackQueryHandler
from telegram.utils.helpers import mention_html


def check_user(user_id: int, bot: Bot, chat: Chat) -> Optional[str]:
    if not user_id:
        reply = " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á …™·¥Ö s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ.."
        return reply

    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message == "User not found":
            reply = "…™ ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä"
            return reply
        else:
            raise

    if user_id == bot.id:
        reply = "…™'·¥ç …¥·¥è·¥õ …¢·¥è…¥…¥·¥Ä ·¥ç·¥ú·¥õ·¥á ·¥ç ès·¥á ü“ì,  ú·¥è·¥°  ú…™…¢ ú ·¥Ä Ä·¥á  è·¥è·¥ú?"
        return reply

    if is_user_admin(chat, user_id, member) or user_id in TIGERS:
        reply = "·¥Ñ·¥Ä…¥'·¥õ. “ì…™…¥·¥Ö s·¥è·¥ç·¥á·¥è…¥·¥á ·¥á üs·¥á ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á  ô·¥ú·¥õ …¥·¥è·¥õ ·¥õ ú…™s ·¥è…¥·¥á."
        return reply

    return None


@run_async
@connection_status
@bot_admin
@user_admin
@loggable
def mute(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args

    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    user_id, reason = extract_user_and_text(message, args)
    reply = check_user(user_id, bot, chat)

    if reply:
        message.reply_text(reply)
        return ""

    member = chat.get_member(user_id)

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#·¥ç·¥ú·¥õ·¥á\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}")

    if reason:
        log += f"\n<b>Reason:</b> {reason}"

    if member.can_send_messages is None or member.can_send_messages:
        chat_permissions = ChatPermissions(can_send_messages=False)
        bot.restrict_chat_member(chat.id, user_id, chat_permissions)
        msg = (
            f"<code>üó£Ô∏è</code><b>·¥ç·¥ú·¥õ·¥á ·¥á·¥†·¥á…¥·¥õ</b>\n"
            f"<code> </code><b>‚Ä¢ ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
            )
        if reason:
            msg += f"\n<code> </code><b>‚Ä¢  Ä·¥á·¥Äs·¥è…¥:</b> \n{html.escape(reason)}"

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "Unmute", callback_data="unmute_({})".format(member.user.id))
        ]])
        bot.sendMessage(
            chat.id,
            msg,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )
        return log
    message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ç·¥ú·¥õ·¥á·¥Ö!")

    return ""


@run_async
@connection_status
@bot_admin
@user_admin
@loggable
def unmute(update: Update, context: CallbackContext) -> str:
    bot, args = context.bot, context.args
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text(
            " è·¥è·¥ú' ü ü …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥á…™·¥õ ú·¥á Ä …¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á, ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è s·¥è·¥ç·¥á·¥è…¥·¥á ·¥õ·¥è  ô·¥á ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö."
        )
        return ""

    member = chat.get_member(int(user_id))

    if member.status != 'kicked' and member.status != 'left':
        if (member.can_send_messages and member.can_send_media_messages and
                member.can_send_other_messages and
                member.can_add_web_page_previews):
            message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Äs ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è s·¥ò·¥á·¥Ä·¥ã.")
        else:
            chat_permissions = ChatPermissions(
                can_send_messages=True,
                can_invite_users=True,
                can_pin_messages=True,
                can_send_polls=True,
                can_change_info=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True)
            try:
                bot.restrict_chat_member(chat.id, int(user_id),
                                         chat_permissions)
            except BadRequest:
                pass
            bot.sendMessage(
                chat.id,
                f"I shall allow <b>{html.escape(member.user.first_name)}</b> to text!",
                parse_mode=ParseMode.HTML)
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#UNMUTE\n"
                f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
            )
    else:
        message.reply_text(
            "·¥õ ú…™s ·¥ús·¥á Ä …™s…¥'·¥õ ·¥á·¥†·¥á…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ, ·¥ú…¥·¥ç·¥ú·¥õ…™…¥…¢ ·¥õ ú·¥á·¥ç ·¥°·¥è…¥'·¥õ ·¥ç·¥Ä·¥ã·¥á ·¥õ ú·¥á·¥ç ·¥õ·¥Ä ü·¥ã ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ ·¥õ ú·¥á è "
            "·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è!")

    return ""


@run_async
@connection_status
@bot_admin
@can_restrict
@user_admin
@loggable
def temp_mute(update: Update, context: CallbackContext) -> str:
    bot, args = context.bot, context.args
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    user_id, reason = extract_user_and_text(message, args)
    reply = check_user(user_id, bot, chat)


    if reply:
        message.reply_text(reply)
        return ""

    member = chat.get_member(user_id)

    if not reason:
        message.reply_text(" è·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥Ä ·¥õ…™·¥ç·¥á ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á ·¥õ ú…™s ·¥ús·¥á Ä “ì·¥è Ä!")
        return ""

    split_reason = reason.split(None, 1)

    time_val = split_reason[0].lower()
    reason = split_reason[1] if len(split_reason) > 1 else ""
    mutetime = extract_time(message, time_val)

    if not mutetime:
        return ""

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#·¥õ·¥á·¥ç·¥ò ·¥ç·¥ú·¥õ·¥á·¥Ö\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}\n"
        f"<b>·¥õ…™·¥ç·¥á:</b> {time_val}"
    )
    if reason:
        log += f"\n<b>Reason:</b> {reason}"

    try:
        if member.can_send_messages is None or member.can_send_messages:
            chat_permissions = ChatPermissions(can_send_messages=False)
            bot.restrict_chat_member(
              chat.id, user_id, chat_permissions, until_date=mutetime,
            )     
            msg = (
                f"<code>üó£Ô∏è</code><b>·¥õ…™·¥ç·¥á ·¥ç·¥ú·¥õ·¥á ·¥á·¥†·¥á…¥·¥õ</b>\n"
                f"<code> </code><b>‚Ä¢ ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}\n"
                f"<code> </code><b>‚Ä¢ ·¥ús·¥á Ä ·¥°…™ ü ü  ô·¥á ·¥ç·¥ú·¥õ·¥á·¥Ö “ì·¥è Ä:</b> {time_val}\n"
            )

            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "·¥ú…¥·¥ç·¥ú·¥õ·¥á", callback_data="unmute_({})".format(member.user.id))
            ]])
            bot.sendMessage(chat.id, msg, reply_markup=keyboard, parse_mode=ParseMode.HTML)

            return log
        message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ç·¥ú·¥õ·¥á·¥Ö.")

    except BadRequest as excp:
        if excp.message == " Ä·¥á·¥ò ü è ·¥ç·¥áss·¥Ä…¢·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö":
            # Do not reply
            message.reply_text(f"·¥ç·¥ú·¥õ·¥á·¥Ö “ì·¥è Ä {time_val}!", quote=False)
            return log
        LOGGER.warning(update)
        LOGGER.exception(
            "ERROR muting user %s in chat %s (%s) due to %s",
            user_id,
            chat.title,
            chat.id,
            excp.message,
        )
        message.reply_text("·¥°·¥á ü ü ·¥Ö·¥Ä·¥ç…¥, …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")

    return ""
  
@user_admin_no_reply
@bot_admin
@loggable
def button(update: Update, context: CallbackContext) -> str:
    query: Optional[CallbackQuery] = update.callback_query
    user: Optional[User] = update.effective_user
    bot: Optional[Bot] = context.bot
    match = re.match(r"unmute_\((.+?)\)", query.data)
    if match:
        user_id = match.group(1)
        chat: Optional[Chat] = update.effective_chat
        member = chat.get_member(user_id)
        chat_permissions = ChatPermissions (
                can_send_messages=True,
                can_invite_users=True,
                can_pin_messages=True,
                can_send_polls=True,
                can_change_info=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
        )                
        unmuted = bot.restrict_chat_member(chat.id, int(user_id), chat_permissions)
        if unmuted:
        	update.effective_message.edit_text(
        	    f"Admin {mention_html(user.id, user.first_name)} Unmuted {mention_html(member.user.id, member.user.first_name)}!",
        	    parse_mode=ParseMode.HTML,
        	)
        	query.answer("Unmuted!")
        	return (
                    f"<b>{html.escape(chat.title)}:</b>\n" 
                    f"#·¥ú…¥·¥ç·¥ú·¥õ·¥á\n" 
                    f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                    f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
                )
    else:
        update.effective_message.edit_text(
            "This user is not muted or has left the group!"
        )
        return ""

MUTE_HANDLER = CommandHandler("mute", mute)
UNMUTE_HANDLER = CommandHandler("unmute", unmute)
TEMPMUTE_HANDLER = CommandHandler(["tmute", "tempmute"], temp_mute)
UNMUTE_BUTTON_HANDLER = CallbackQueryHandler(button, pattern=r"unmute_")

dispatcher.add_handler(MUTE_HANDLER)
dispatcher.add_handler(UNMUTE_HANDLER)
dispatcher.add_handler(TEMPMUTE_HANDLER)
dispatcher.add_handler(UNMUTE_BUTTON_HANDLER)

__mod_name__ = "ü§ê ·¥ç·¥ú·¥õ·¥á"
__handlers__ = [MUTE_HANDLER, UNMUTE_HANDLER, TEMPMUTE_HANDLER]
